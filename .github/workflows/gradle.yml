name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  #Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    # 1. Java 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    # gradle caching - 빌드 시간 향상
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
      
    #Set up Gradle
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    # Github Submodule에서 환경변수 가져오기
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        token: ${{secrets.CONFIG_TOKEN}}
        submodules: true

    # 프로젝트 메타정보 추출해서 Docker image에 태그 생성
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{secrets.DOCKERHUB_USERNAME}}/daily-pay
        # 가장 최신 image 에 latest tag 달기
        flavor: |
          latest=true
        # Git short commit, use git version tag
        tags: |
          type=semver,pattern={{version}}

    # gradle build
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew clean build -x test

    # DockerHub 로그인
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PASSWORD}}

    # Docker image Build해서 DockerHub에 Push
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: yerim216/where-r-u:latest

    # EC2 서버에 배포
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      with:
        host: ${{ secrets.SSH_KNOWN_HOSTS }} # EC2 퍼블릭 IPv4 DNS
        username: ${{secrets.SSH_USER}}
        key: ${{ secrets.SSH_PEM_KEY }}
        envs: GITHUB_SHA
        # 주의 : 실행중인 컨테이너 전부 종료
        script: |
          sudo docker stop $(sudo docker ps -a -q)
          sudo docker pull ${{secrets.DOCKERHUB_USERNAME}}/where-r-u:latest
          sudo docker run -d -p 80:8080 ${{secrets.DOCKERHUB_USERNAME}}/where-r-u:latest
          sudo docker image prune -f
